""" Spi LUT helpers

.. moduleauthor:: `Marie FETIVEAU <github.com/mfe>`_

"""
__version__ = "0.2"
from utils.abstract_lut_helper import AbstractLUTHelper
from utils import lut_presets as presets
from utils.color_log_helper import print_warning_message



class SpiHelperException(Exception):
    """Module custom exception

    Args:
        Exception

    """
    pass


class SpiLutHelper(AbstractLUTHelper):
    """ Spi LUT helper

    """
    @staticmethod
    def get_default_preset():
        return {
            presets.TYPE: "default",
            presets.EXT: {
                          '1D': '.spi1d',
                          '3D': '.spi3d',
                },
            presets.IN_RANGE: [0.0, 1.0],
            presets.OUT_RANGE: [0.0, 1.0],
            presets.OUT_BITDEPTH: 12,
            presets.CUBE_SIZE: 17,
            presets.TITLE: "Spi LUT",
            presets.COMMENT: ("Generated by ColorPipe-tools, spi_helper "
                              "{0}").format(__version__),
            presets.VERSION: "1"
            }

    @staticmethod
    def _get_pattern_1d(preset):
        return "        {0:.12f}\n"

    def _write_1d_2d_lut(self, process_function, file_path, preset,
                         line_function):
        # Test ranges
        self._check_range(preset)
        # Get data
        data = self._get_1d_data(process_function, preset)
        lutfile = open(file_path, 'w+')
        # Version
        lutfile.write("Version {0}\n".format(preset[presets.VERSION]))
        # Input range
        input_range = preset[presets.IN_RANGE]
        lutfile.write("From {0} {1}\n".format(input_range[0], input_range[1]))
        # Length
        lutfile.write("Length {0}\n".format(len(data)))
        # Components
        lutfile.write("Components 1\n{\n")
        # data
        for rgb in data:
            lutfile.write(line_function(preset, rgb))
        lutfile.write("}/n")
        lutfile.close()
        return self.get_export_message(file_path)

    def write_2d_lut(self, process_function, file_path, preset):
        print_warning_message("2D LUT is not supported in spi1d format"
                              " --> Switch to 1D LUT.")
        return self.write_1d_lut(process_function, file_path, preset)

    def write_3d_lut(self, process_function, file_path, preset):
        # Test ranges
        self._check_range(preset)
        # Get data
        in_data, data = self._get_3d_data(process_function, preset)
        lutfile = open(file_path, 'w+')
        # header
        lutfile.write("SPILUT 1.0\n3 3\n")
        # cube size
        lutfile.write("{0} {0} {0}\n".format(preset[presets.CUBE_SIZE]))
        # write data
        for in_rgb, rgb in zip(in_data, data):
            lutfile.write(self._get_rgb_value_line(preset, rgb, in_rgb))
        lutfile.close()
        return self.get_export_message(file_path)

    @staticmethod
    def _get_range_message(range_name, arange):
        """ Get range warning/error message

        Returns:
            .str

        """
        return ("Spi {0} is expected to be float."
                " Ex: [0.0, 1.0] or [-0.25, 2.0].\nYour range {1}"
                ).format(range_name, arange)

    def _check_range(self, preset):
        """ Check output range. CSP LUT are float.
            Print a warning or raise an error

        """
        for str_range in ['input_range', 'output_range']:
            arange = preset[str_range]
            presets.check_range_is_float(arange,
                                         self._get_range_message(str_range,
                                                                 arange))

SPI_HELPER = SpiLutHelper()
